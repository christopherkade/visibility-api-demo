{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","changeFavicon","link","document","querySelector","href","handleVisibilityChange","window","addEventListener","hidden","_this","state","player","pauseVideo","playVideo","_onPlay","event","setState","target","react_default","a","createElement","className","YouTube","opts","height","width","playerVars","autoplay","onPlay","this","videoId","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sQA+DeA,oNAvDbC,cAAgB,SAAAC,GACEC,SAASC,cAAc,QAC/BC,KAAOH,KAQjBI,uBAAyB,WACvBC,OAAOC,iBAAiB,mBAAoB,WACtCL,SAASM,QACXC,EAAKT,cAAc,wGACnBS,EAAKC,MAAMC,OAAOC,eAElBH,EAAKT,cAAc,2FACnBS,EAAKC,MAAMC,OAAOE,kBAQxBC,QAAU,SAACC,GACTN,EAAKO,SAAS,CACZL,OAAQI,EAAME,SAGhBR,EAAKJ,kGAYL,OACEa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,WAChBH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACEC,KAZK,CACXC,OAAQ,MACRC,MAAO,MACPC,WAAY,CACVC,SAAU,IASNC,OAAQC,KAAKf,QACbgB,QAAQ,yBApDFC,cCQEC,QACW,cAA7B1B,OAAO2B,SAASC,UAEe,UAA7B5B,OAAO2B,SAASC,UAEhB5B,OAAO2B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASpC,SAASqC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ba05fccf.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Youtube from 'react-youtube'\nimport './App.css';\n\nclass App extends Component {\n  /**\n   * Changes the current favicon with the one given as parameter\n   */\n  changeFavicon = link => {\n    const favicon = document.querySelector('link')\n    favicon.href = link;\n  }\n\n  /**\n   * Catches visibility changes\n   * On hidden: pause video and change favicon to pause icon\n   * On shown: play video and change favicon to start icon\n   */\n  handleVisibilityChange = () => {    \n    window.addEventListener(\"visibilitychange\", () => {\n      if (document.hidden) {\n        this.changeFavicon(\"https://user-images.githubusercontent.com/15229355/54630478-3eb49b80-4a7a-11e9-889e-82cd455e57d1.png\")\n        this.state.player.pauseVideo()\n      } else {\n        this.changeFavicon(\"https://cdn1.iconfinder.com/data/icons/material-audio-video/20/play-circle-fill-128.png\")        \n        this.state.player.playVideo()\n      }\n    })\n  }\n\n  /**\n   * Once the video has started save the player's state\n   */\n  _onPlay = (event) => {\n    this.setState({\n      player: event.target\n    });\n    \n    this.handleVisibilityChange()\n  }\n\n  render() {\n    const opts = {\n      height: '390',\n      width: '640',\n      playerVars: {\n        autoplay: 1\n      }\n    };\n \n    return (\n      <div className=\"App\">\n        <header className=\"content\">        \n          <Youtube\n            opts={opts}\n            onPlay={this._onPlay}\n            videoId=\"nx1tOOc_3fU\" />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}